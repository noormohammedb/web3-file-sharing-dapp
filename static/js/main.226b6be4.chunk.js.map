{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","box.png","components/Main.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","Component","componentWillMount","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","console","log","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","DStorage","networks","dstorage","Contract","abi","address","methods","fileCount","call","i","allFiles","filesFromChain","files","state","constructor","props","super","captureFile","event","preventDefault","file","target","reader","FileReader","readAsArrayBuffer","onload","this","buffer","Buffer","result","type","name","uploadFile","description","add","err","error","loading","ipfsHash","path","hash","size","send","from","on","setTimeout","reload","e","id","className","Navbar","href","rel","src","box","width","height","alt","module","exports","Main","role","style","maxWidth","onSubmit","fileDescription","value","htmlFor","placeholder","ref","inp","required","onChange","onClick","open","maxHeight","map","key","fileId","fileName","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","fileHash"],"mappings":"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","file":"static/js/main.226b6be4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import DStorage from '../abis/DStorage.json'\n// import DStorage from '../contracts/artifacts/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\nconst ipfsClient = require(\"ipfs-http-client\");\nconst ipfs = ipfsClient({ host: \"ipfs.infura.io\", port: 5001, protocol: \"https\" });\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    //Setting up Web3\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      alert(\"Non ethereum browser detected, install metamask\");\n    }\n  }\n\n  async loadBlockchainData() {\n    //Declare Web3\n    const web3 = window.web3;\n    console.log(web3);\n\n    //Load account\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n    this.setState({ account: accounts[0] })\n\n    //Network ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = DStorage.networks[networkId]\n\n    //IF got connection, get data from contracts\n    if (networkData) {\n      //Assign contract\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address);\n      this.setState({ dstorage });\n\n      //Get files amount\n      const fileCount = await dstorage.methods.fileCount().call();\n      this.setState({ fileCount });\n\n      //Load files&sort by the newest\n      for (var i = fileCount; i >= 1; i--) {\n        const filesFromChain = await dstorage.methods.allFiles(i).call();\n        this.setState({ files: [...this.state.files, filesFromChain] });\n      }\n    }\n    else {\n      //alert Error\n      window.alert(\"dstorage contract not deployed to detected network\");\n    }\n\n  }\n\n  // Get file from user\n  captureFile = event => {\n    event.preventDefault();\n\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onload = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name\n      })\n      console.log('buffer: ', this.state.buffer);\n    }\n  }\n\n\n  //Upload File\n  uploadFile = description => {\n\n    //Add file to the IPFS\n    ipfs.add(this.state.buffer, (err, result) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      console.log(\"IPFS response: \", result);\n      this.setState({ loading: true, ipfsHash: result[0].path });\n\n      if (this.state.type === '') {\n        this.setState({ type: 'none' })\n      }\n\n      this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({\n          loading: false,\n          type: null,\n          name: null,\n        })\n        console.log(\"transaction hash: \", hash);\n        window.alert(\"reload in 5 sec\");\n        setTimeout(() => {\n          window.location.reload();\n        }, 5000);\n\n      }).on('error', (e) => {\n        console.log(\"error: \", e);\n        alert(\"error\");\n        this.setState({ loading: false });\n      });\n    });\n\n  }\n\n  //Set states\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: \"\",\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null,\n      ipfsHash: null,\n    }\n    //Bind functions\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        {this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n            files={this.state.files}\n            captureFile={this.captureFile}\n            uploadFile={this.uploadFile}\n            ipfsHash={this.state.ipfsHash}\n            files={this.state.files}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\n// import Identicon from 'identicon.js';\nimport box from '../box.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"http://www.dappuniversity.com/bootcamp\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\n          D$t0r@g3\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <b className='text-white'>{this.props.account}</b>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/box.df8b84d5.png\";","import React, { Component } from 'react';\nimport { convertBytes } from './helpers';\nimport moment from 'moment'\n\nclass Main extends Component {\n\n  render() {\n    console.log(\"render main\");\n    return (\n      <div className=\"container-fluid mt-5 text-center\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1024px' }}>\n            <div className=\"content\">\n              <p>&nbsp;</p>\n\n              <h2>  share file </h2>\n              <form onSubmit={(event) => {\n                event.preventDefault();\n                console.log(\"form submitted\");\n                const description = this.fileDescription.value;\n                this.props.uploadFile(description);\n              }}>\n\n                <label htmlFor='file-inp'>\n                  select file\n                </label>\n                <br />\n                {/* <input type='' name='' placeholder='' ref={ } /> */}\n                <input type='text' name='file-desc' placeholder='description' ref={(inp) => { this.fileDescription = inp; }} required />\n                <input type='file' name='file-obj' onChange={this.props.captureFile} id='file-inp' required />\n                <button type='submit' > upload </button>\n              </form>\n\n\n              {/* Creatining uploading card ... */}\n              {/* Uploading file... */}\n              {this.props.ipfsHash ?\n                // <a href={`https://ipfs.infura.io/ipfs/${this.props.ipfsHash}`} target='_blank' >\n                <a href='' target=''>\n                  <h3 onClick={() => { window.open(`https://ipfs.infura.io/ipfs/${this.props.ipfsHash}`, \"_blank\"); }\n                  }>ipfs://{this.props.ipfsHash}</h3>\n                </a>\n                // </a>\n                : null}\n\n              <p>&nbsp;</p>\n              {/* Create Table*/}\n              <table className=\"table-sm table-bordered text-monospace\" style={{ width: '1000px', maxHeight: '450px' }}>\n                {/* Set table columns */}\n                <thead>\n                  <tr>\n                    <th> id </th>\n                    <th> name </th>\n                    <th> fileDescription </th>\n                    <th> size </th>\n                    <th> time </th>\n                    <th> link </th>\n\n                  </tr>\n                </thead>\n                <tbody>\n\n                  {\n                    this.props.files.map((file, key) => {\n                      // console.log(file);\n                      return (\n                        <tr key={key}>\n                          <td> {file.fileId} </td>\n                          <td> {file.fileName} </td>\n                          <td> {file.fileDescription} </td>\n                          <td> {convertBytes(file.fileSize)} </td>\n                          <td> {moment.unix(file.uploadTime).format(\"hh:mm:ss|d/mm/yy\")} </td>\n                          <td>\n                            <a href={`https://ipfs.infura.io/ipfs/${file.fileHash}`} target='_blank' rel=\"noopener noreferrer\">\n                              click me\n                            </a>\n                          </td>\n                        </tr>\n                      );\n                    })\n                    // console.log(this.props.files)\n                  }\n\n                </tbody>\n                {/* Mapping rows... */}\n              </table>\n            </div>\n          </main>\n        </div >\n      </div >\n    );\n  }\n}\n\nexport default Main;","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}